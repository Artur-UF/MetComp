# -*- coding: utf-8 -*-
"""aula_python_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15s_3rr-FbFbV8ReeSkL4G_4rX1VgIn4o

# Revisão
"""

print('Olá, Mundo!')

"""**Números**"""

a = 10  # variável a recebe um número inteiro
b = 9.7 # variável b recebe um número float (ponto flutuante)
a+=5   # a = a+5
print(a)

a/=3   # a = a/3
print(a)

a+b

"""**Strings**

String são sequências de caracteres, que podem ser descritas de diversas formas. Elas são delimitadas por aspas simples (' ') ou duplas (" ").  

As strings podem ser indexadas, com o primeiro caractere sendo o índice 0. 
"""

palavra = 'python'

print(palavra[0]) #imprime o primeiro caractere da string.
print(palavra[1]) #imprime o segndo caractere da string.
print(palavra[-1]) #imprime o último caractere. Índices negativos contam de trás para a frente.

"""Strings podem ser 'fatiadas'. Devemos especificar o índice inicial (incluído) e o final (excluído), separados por ':'"""

print(palavra[2:5])  #imprime do terceiro caractere (índice 2) ao quinto caractere (índice 4).
print(palavra[:3])   #quando índice inicial não é especificado, assume que é o primeiro (índice 0)
print(palavra[2:])   #quando índice final não é especificado, assume que vai até o último

"""**Listas**

Dentre as estruturas para agrupar valores, as listas são as mais simples e versáteis. 
Os valores em uma lista são delimitados por [ ] e separados por vírgulas. Os itens de uma lista não precisam ser todos do mesmo tipo (podem ser inteiros, float, strings, etc).
"""

l=[3,7,23,98]
nl = [4, 7.6, 'bla'] #listas podem misturar tipos de dados

"""A indexação dos elementos das listas segue o mesmo esquema apresentado acima para strings. """

print(l[2])
print(nl[-1])
print(l[::2])  # fatia a lista do índice 0 (incluído) ao índice 4 (excluído), indo de 2 em 2

len(l)  # tamanho da lista l

"""Listas podem ser concatenadas

"""

l+nl

"""Podemos adicionar elementos a uma lista"""

l.append(64.)
print(l)

"""# Condicionais e comando if

**Comparações**
"""

6 * 2 == 9 + 3

8*6.8 == 7.8*1.9

a=5.5
b=7.3
c=9.8
a*2 > b

(b > a) and (b < c)

"""Operadores de comparação:

* == e != 
* \> e <
* \>= e <=
* is e is not
* in e not in

Operadores Booleanos

* and
* or
* not

**Comando if**
"""

x=20
if x > 0:
   resultado = 'positivo'

print(resultado)

"""Note que a indentação é muito importante!

Seja consistente na indentação. Evite usar tecla tab. Use 4 espaços. A maioria dos editores farão a indentação automaticamente. 

Os blocos são fechado através da 'de-indentação'. 
"""

x=0
if x > 0:
    resultado = 'positivo'
elif x == 0:
    resultado = 'zero'
else:
    resultado = 'negativo'

print("x é ",resultado)

if 'Maria' in ['João', 'Maria', 'José', 'Ana']:
  print('Sim')

if 'Cristina' not in ['João', 'Maria', 'José', 'Ana']:
  print('Não')

"""# Loops - Comando while"""

a=0
while a < 4:
  a+=1
  print(a)

b=0
while True:
  b+=3
  if b >= 10:
    break
  print(b)

"""# Loops - Comando for"""

l=[2,7,9,25]
for i in l:
    print(i**2)

alunos=['João', 'Maria', 'José', 'Ana']
for nome in alunos:
    print(nome,len(nome))

alunos[0]

for letras in alunos[0]:
    print(letras)

"""# Função range()"""

for j in range(0,5):
    print(j)

for k in range(5,10,2):
    print(k)

for l in range(len(alunos)):
    print(l,alunos[l])

print(range(6))

list(range(6))

"""# Comandos break e continue"""

for letra in "string":
    if letra == "i":
        break
    print(letra)

print("Fim")

for letra in "string":
    if letra == "i":
        continue
    print(letra)

print("Fim")

for num in range(1,10):
    if num % 2 == 0:
        print(num, " é par")

"""# Atividade

Utilizando os comandos vistos na aula, implemente seu algoritmo para escrever os primeiros 20 números da sequência de Fibonacci: 0,1,1,2,3,5,8,13,...
"""